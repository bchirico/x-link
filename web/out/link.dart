// Auto-generated from link.html.
// DO NOT EDIT.

library x_link;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;

import 'package:web_ui/web_ui.dart';

import 'dart:html';

class LinkComponent extends WebComponent {
  
  /** Autogenerated from the template. */
  
  /**
  * Shadow root for this component. We use 'var' to allow simulating shadow DOM
  * on browsers that don't support this feature.
  */
  var _root;
  autogenerated.ButtonElement __add;
  autogenerated.DivElement __container;
  autogenerated.Element __e2;
  autogenerated.InputElement __link, __title;
  autogenerated.Template __t;
  
  LinkComponent.forElement(e) : super.forElement(e);
  
  void created_autogenerated() {
    _root = createShadowRoot();
    __t = new autogenerated.Template(_root);
    _root.innerHtml = '''
    <div id="container">
    <input type="text" id="link" placeholder="link">
    <input type="text" id="title" placeholder="titolo">
    <button type="submit" text="+ Add" id="add"></button><br>
    <template id="__e-2" style="display:none"></template>
    </div>
    ''';
    __container = _root.query('#container');
    __link = __container.query('#link');
    __t.listen(__link.onBlur, ($event) { setPreview(); });
    __title = __container.query('#title');
    __add = __container.query('#add');
    __e2 = __container.query('#__e-2');
    __t.conditional(__e2, () => (isVisible), (__t) {
      var __e1;
      __e1 = new autogenerated.IFrameElement();
      __t.oneWayBind(() => (preview), (e) { __e1.src = e; }, true);
      __t.addAll([
        new autogenerated.Text('\n            '),
        __e1,
        new autogenerated.Text('\n          ')
      ]);
    });
    
    __t.create();
  }
  
  void inserted_autogenerated() {
    __t.insert();
  }
  
  void removed_autogenerated() {
    __t.remove();
    __add = __container = __e2 = __link = __title = __t = null;
  }
  
  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated.ShadowRoot) _root = this;
  }
  
  /** Original code from the component. */
  
  bool isVisible = false;
  var preview;
  
  void setPreview(){
    
    var link = query('#link');
    preview = link.value;
    isVisible = true;
  }
  
}

